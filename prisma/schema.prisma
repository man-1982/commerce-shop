// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //  only needed for the "prisma-client"
  // @see https://www.prisma.io/docs/orm/prisma-schema/overview/generators
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: Consider delete on cascade Product and User as well

model User {
  uid       Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  role      String   @default("autorised") @db.VarChar(64) // TODO can be Entity as well
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Boolean  @default(true) @db.Boolean
  Cart      Cart[]

  @@index([uid, status])
}

model Image {
  mid       Int     @id @default(autoincrement())
  uuid      String  @unique @default(uuid()) @db.Uuid
  imageData String
  title     String? @db.VarChar(64)
  product   Product @relation(fields: [pid], references: [pid])
  pid       Int
}

model Product {
  pid         Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid()) @db.Uuid
  title       String   @db.VarChar(64)
  sku         String   @db.VarChar(64)
  quantity    Int      @default(1) // TODO should always >= 0
  price       Decimal  @db.Decimal(8, 2)
  description String?  @db.VarChar(2048)
  photos      Image[]
  status      Boolean  @default(true) @db.Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Cart        Cart[]

  @@index([pid, status]) // TODO consider add title to index
}

model Cart {
  cid       Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  uid       Int
  pid       Int
  price     Decimal  @db.Decimal(8, 2) // TODO: Should reflect product changes
  quantity  Int      @default(1)
  amount    Decimal  @default(0) @db.Decimal(8, 2) // TODO: quantity*price
  user      User     @relation(fields: [uid], references: [uid], onDelete: Cascade)
  product   Product  @relation(fields: [pid], references: [pid], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Boolean  @default(true)

  @@unique([uid, pid]) // should be unique per user and product,change only quality
  @@index([cid, status, uid])
}
